// Code generated by requestwaraper. DO NOT EDIT.
package tests

import (
	"encoding/json"
	"fmt"
	"github.com/go-playground/validator/v10"
	"io/ioutil"
	"net/http"
)

var packageValidator = validator.New()

var DeviceCreateRequestParamsMap = map[string]string{
	"device.UserID":          "user_id",
	"device.Locale":          "locale",
	"device.Num":             "num",
	"device.Type":            "type",
	"device.NativePushToken": "native_push_token",
	"device.NativeVoIPToken": "native_voip_token",
	"device.Carrier":         "carrier",
	"device.Mcc":             "mcc",
	"device.Mnc":             "mnc",
	"device.OsVersion":       "os_version",
	"device.BuildNumber":     "build_number",
	"device.AppVersion":      "app_version",
	"device.CountryCode":     "country_code",
	"device.PhoneNumber":     "phone_number",
	"device.Mode":            "mode",
	"device.MyData.N":        "MyData.N",
}

func DeviceCreateRequestParamsValidator(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		var body device
		bytes, err := ioutil.ReadAll(r.Body)
		if err != nil {
			w.WriteHeader(http.StatusBadRequest)
			_, _ = w.Write([]byte("cant read body"))
			return
		}
		if err := body.UnmarshalJSON(bytes); err != nil {
			w.WriteHeader(http.StatusBadRequest)
			_, _ = w.Write([]byte(fmt.Sprintf("invalid json: %s", err)))
			return
		}
		err = packageValidator.Struct(body)
		if err != nil {
			w.WriteHeader(http.StatusBadRequest)
			verrs := err.(validator.ValidationErrors)
			m := make(map[string][]interface{}, len(verrs))
			for _, e := range verrs {
				n := DeviceCreateRequestParamsMap[e.Namespace()]
				v, ok := m[n]
				if !ok {
					v = make([]interface{}, 0, 5)
				}
				v = append(v, printField(e))
				m[n] = v
			}
			b, _ := json.Marshal(&requestwarapper_error_model{
				Errors: m,
			})
			w.Write(b)
			return
		}
		next.ServeHTTP(w, r)
	})
}

func printField(e validator.FieldError) interface{} {
	switch e.Tag() {
	case "required":
		return requestwarapper_error_required
	default:
		return &struct {
		}{}
	}
}

type requestwarapper_error_model struct {
	Errors map[string][]interface{} `json:"errors"`
}

var requestwarapper_error_required = struct {
	Key string `json:"key"`
}{
	Key: "required",
}
