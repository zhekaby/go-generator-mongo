package main

import (
	"fmt"
	"github.com/zhekaby/go-generators/common"
	"io"
	"os"
	"text/template"
)

type writer struct {
	parser *common.Parser
}

type writerData struct {
	*common.Parser
	*common.StructInfo
}

func NewWriter(p *common.Parser) *writer {
	return &writer{p}
}

func (w *writer) Write() error {
	f, err := os.Create(fmt.Sprintf("%s/requestwrapper_validator_middleware.go", w.parser.Dir))
	if err != nil {
		return err
	}
	defer f.Close()
	fmt.Fprintf(f, "// Code generated by requestwaraper. DO NOT EDIT.\n")
	fmt.Fprintf(f, "package %s\n\n", w.parser.PkgName)
	fmt.Fprintf(f, writerHead)

	for _, s := range w.parser.Structs {
		d := &writerData{
			Parser:     w.parser,
			StructInfo: s,
		}

		d.write(f)
	}

	fmt.Fprintf(f, writerFooter)
	return nil
}

func (d *writerData) write(f io.Writer) error {
	template.Must(template.New("queue").Parse(writer_body_validator)).Execute(f, d)
	for _, field := range d.StructInfo.Fields {
		for k, v := range field.Validations {
			fmt.Fprintf(f, fmt.Sprintf("var requestwarapper_error_%s_%s_%s = struct {\n", d.StructInfo.Name, field.NsCompact, k))
			fmt.Fprintf(f, "	Key string `json:\"key\"`\n")
			switch k {
			case "max":
				fmt.Fprintf(f, "	Value float64 `json:\"value\"`\n")
				fmt.Fprintf(f, "}{\n")
				fmt.Fprintf(f, fmt.Sprintf("	Value: %s,\n", v))
			case "min":
				fmt.Fprintf(f, "	Value float64 `json:\"value\"`\n")
				fmt.Fprintf(f, "}{\n")
				fmt.Fprintf(f, fmt.Sprintf("	Value: %s,\n", v))
			default:
				fmt.Fprintf(f, "}{\n")
			}

			fmt.Fprintf(f, fmt.Sprintf("	Key: \"%s\",\n", k))
			fmt.Fprintf(f, "}\n")
		}
	}
	return nil
}
