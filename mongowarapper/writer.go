package main

import (
	"fmt"
	"os"
	"text/template"
)

type writer struct {
	parser *Parser
}

type writerData struct {
	*Parser
	*collection
}

func NewWriter(p *Parser) *writer {
	return &writer{p}
}

func (w *writer) Write() {
	for _, collection := range w.parser.collections {
		d := &writerData{
			Parser:     w.parser,
			collection: collection,
		}
		d.write()
	}
}

func (d *writerData) write() error {
	f, err := os.Create(fmt.Sprintf("%s/%s_repository.go", d.Dir, d.collection.Name))
	if err != nil {
		return err
	}
	defer f.Close()
	fmt.Fprintf(f, "// Code generated by mongowarapper. DO NOT EDIT.\n")
	fmt.Fprintf(f, "package %s\n", d.PkgName)

	//interfaces
	template.Must(template.New("queue").Parse(writerIface)).Execute(f, d)
	template.Must(template.New("queue").Parse(writerUpdater)).Execute(f, d)

	return nil
}
