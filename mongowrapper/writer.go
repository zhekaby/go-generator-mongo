package main

import (
	"fmt"
	"github.com/zhekaby/go-generator-mongo/common"
	"os"
	"text/template"
)

type writer struct {
	Cs, CsVar, DbVar string
	*common.Parser
	*common.Collection
}

func NewWriter(cs, csVar, dbVar string, p *common.Parser) *writer {
	return &writer{Cs: cs, CsVar: csVar, DbVar: dbVar, Parser: p}
}

func (w *writer) Write() error {
	for _, c := range w.Collections {
		w.Collection = c
		if err := w.write(); err != nil {
			return err
		}
	}
	return nil
}

func (w *writer) write() error {
	f, err := os.Create(fmt.Sprintf("%s/%s_repository.go", w.Dir, w.Collection.Name))
	if err != nil {
		return err
	}
	defer f.Close()
	fmt.Printf("generating %s...", f.Name())
	fmt.Fprintf(f, "// Code generated by mongowrapper. DO NOT EDIT.\n")
	fmt.Fprintf(f, "package %s\n", w.PkgName)

	for _, str := range []string{writerIface, writerUpdater} {
		tpl, err := template.New("queue").Parse(str)
		if err != nil {
			return err
		}
		err = template.Must(tpl, err).Execute(f, w)
		if err != nil {
			return err
		}
	}

	fmt.Println("done")

	return nil
}
