package main

import (
	"fmt"
	"os"
	"text/template"
)

type writer struct {
	Cs, CsVar, DbVar string
	*Parser
	*collection
}

func NewWriter(cs, csVar, dbVar string, p *Parser) *writer {
	return &writer{Cs: cs, CsVar: csVar, DbVar: dbVar, Parser: p}

}

func (w *writer) Write() {
	for _, c := range w.Collections {
		w.collection = c
		w.write()
	}
}

func (w *writer) write() error {
	f, err := os.Create(fmt.Sprintf("%s/%s_repository.go", w.Dir, w.collection.Name))
	if err != nil {
		return err
	}
	defer f.Close()
	fmt.Fprintf(f, "// Code generated by mongowrapper. DO NOT EDIT.\n")
	fmt.Fprintf(f, "package %s\n", w.PkgName)

	//interfaces
	template.Must(template.New("queue").Parse(writerIface)).Execute(f, w)
	template.Must(template.New("queue").Parse(writerUpdater)).Execute(f, w)

	return nil
}
